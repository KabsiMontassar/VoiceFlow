# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN npm install -g pnpm && apk add --no-cache python3 make g++

# Copy shared package first (smaller, better for layer caching)
COPY shared/package.json shared/pnpm-lock.yaml ./shared/
COPY shared/src ./shared/src
COPY shared/tsconfig.json ./shared/

# Copy backend
COPY backend/package.json backend/pnpm-lock.yaml ./backend/
COPY backend/src ./backend/src
COPY backend/tsconfig.json ./backend/

# Install dependencies
RUN cd /app/backend && pnpm install --frozen-lockfile

# Build backend
RUN cd /app/backend && pnpm build

# Production stage - minimal runtime image
FROM node:20-alpine

WORKDIR /app

ENV NODE_ENV=production

# Install pnpm
RUN npm install -g pnpm

# Copy built application
COPY --from=builder /app/backend/dist ./dist
COPY --from=builder /app/backend/package.json ./
COPY --from=builder /app/backend/pnpm-lock.yaml ./

# Install production dependencies only
RUN pnpm install --frozen-lockfile --prod && \
    pnpm prune --prod && \
    rm -rf .pnpm-store

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"

EXPOSE 3000

CMD ["node", "dist/index.js"]
